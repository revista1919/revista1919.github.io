name: Deploy and Manage Articles

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [rebuild]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # ← CAMBIADO: De 20 a 18 para estabilidad
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # ← NUEVO: Limpieza agresiva antes de instalar
      - name: Clean install dependencies
        run: |
          echo "🧹 Limpieza agresiva de dependencias..."
          rm -rf node_modules
          rm -f package-lock.json
          npm cache clean --force
          
          echo "📦 Instalación limpia con legacy peer deps..."
          npm ci --legacy-peer-deps
          
          echo "🔧 Fixing vulnerabilities..."
          npm audit fix --force
          
          echo "🔍 Verificando webpack..."
          npm ls webpack enhanced-resolve
        env:
          NODE_ENV: production

      - name: Debug secrets
        run: |
          echo "🔍 Debug secrets:"
          echo "ARTICULOS_SCRIPT length: ${#ARTICULOS_SCRIPT}"
          echo "MY_GITHUB_TOKEN length: ${#MY_GITHUB_TOKEN}"
          echo "USERS_CSV length: ${#USERS_CSV}"
          echo "FIREBASE_API_KEY length: ${#FIREBASE_API_KEY}"
          echo "FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID:-MISSING}"
        env:
          ARTICULOS_SCRIPT: ${{ secrets.ARTICULOS_SCRIPT }}
          MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          USERS_CSV: ${{ secrets.USERS_CSV }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Create .env.local
        run: |
          echo "🔨 Building with env vars..."
          # ← MEJORADO: Crear .env.local con todas las variables necesarias
          cat > .env.local << EOF
          REACT_APP_ARTICULOS_SCRIPT_URL=${{ secrets.ARTICULOS_SCRIPT }}
          REACT_APP_GH_TOKEN=${{ secrets.MY_GITHUB_TOKEN }}
          REACT_APP_USERS_CSV=${{ secrets.USERS_CSV }}
          REACT_APP_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN=usuarios-rnce.firebaseapp.com
          REACT_APP_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET=usuarios-rnce.firebasestorage.app
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID=688242139131
          REACT_APP_FIREBASE_APP_ID=1:688242139131:web:3a98663545e73110c3f55e
          REACT_APP_FIREBASE_MEASUREMENT_ID=G-K90MKB7BDP
          NODE_ENV=production
          DEBUG=false
          EOF
          
          echo "📝 .env.local creado:"
          cat .env.local
          
          echo "🔍 Verificando variables críticas:"
          if [ -n "${{ secrets.ARTICULOS_SCRIPT }}" ]; then
            echo "✅ ARTICULOS_SCRIPT presente"
          else
            echo "⚠️ ARTICULOS_SCRIPT vacío"
          fi
          
          if [ -n "${{ secrets.FIREBASE_API_KEY }}" ]; then
            echo "✅ FIREBASE_API_KEY presente"
          else
            echo "⚠️ FIREBASE_API_KEY vacío (modo offline)"
          fi

      - name: Build project
        run: |
          echo "🚀 Ejecutando build con debug..."
          npm run build:debug
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          echo "📁 Listing dist directory contents:"
          ls -la dist/
          
          echo "📦 Checking bundle files:"
          find dist/ -name "*.js" -exec ls -lh {} \;
          
          echo "🔍 Checking for Firebase config in bundle:"
          if grep -r "REACT_APP_FIREBASE_API_KEY" dist/ 2>/dev/null; then
            echo "✅ Firebase API key referencia encontrada en bundle"
          else
            echo "⚠️ REACT_APP_FIREBASE_API_KEY no encontrada en bundle (normal si está vacío)"
          fi
          
          echo "🔍 Checking for project ID:"
          if grep -r "usuarios-rnce" dist/ 2>/dev/null; then
            echo "✅ Firebase project ID encontrado"
          else
            echo "⚠️ usuarios-rnce no encontrado en bundle"
          fi
          
          echo "🔍 Checking for CSV URL:"
          if grep -r "script.google.com" dist/ 2>/dev/null; then
            echo "✅ Google Script URL encontrada en bundle"
          else
            echo "⚠️ Google Script URL no encontrada en bundle"
          fi
          
          echo "📏 Bundle size check:"
          if [ -f "dist/bundle.js" ]; then
            size=\$(du -h dist/bundle.js | cut -f1)
            echo "📦 bundle.js size: \$size"
          fi
          
          if [ -d "dist/assets" ]; then
            echo "📁 Assets directory exists:"
            ls -la dist/assets/
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # ← NUEVO: Notificación de éxito/fallo
      - name: Notify build result
        if: always()
        run: |
          if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "🚀 Build completado: ${{ job.status }}"
            echo "📊 Job status: ${{ job.status }}"
            echo "💡 URL de deploy: ${{ steps.deployment.outputs.page_url }}"
          fi