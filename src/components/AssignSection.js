import React, { useState, useEffect, useMemo } from 'react';
import Papa from 'papaparse';

const USERS_CSV = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRcXoR3CjwKFIXSuY5grX1VE2uPQB3jf4XjfQf6JWfX9zJNXV4zaWmDiF2kQXSK03qe2hQrUrVAhviz/pub?output=csv';
const INCOMING_CSV = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQJx5loBW2UoEAhkdkkjad7VQxtjBJKtZT8ZIBMd0NGdAZH7Z2hKNczn1OrTHZRrBzI5_mQRHzxYxHS/pub?gid=1161174444&single=true&output=csv';
const ASSIGNMENTS_CSV = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vS_RFrrfaVQHftZUhvJ1LVz0i_Tju-6PlYI8tAu5hLNLN21u8M7KV-eiruomZEcMuc_sxLZ1rXBhX1O/pub?output=csv';
const SCRIPT_URL = 'https://script.google.com/macros/s/AKfycby2B1OUt3TMqaed6Vz-iamUPn4gHhKXG2RRxiy8Nt6u69Cg-2kSze2XQ-NywX5QrNfy/exec';

const sanitizeInput = (input) => input ? input.trim().toLowerCase().replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') : '';

export default function AssignSection({ user, onClose }) {
  const [users, setUsers] = useState([]);
  const [reviewers, setReviewers] = useState([]);
  const [sectionEditors, setSectionEditors] = useState([]);
  const [incoming, setIncoming] = useState([]);
  const [assignments, setAssignments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedUser, setSelectedUser] = useState(null);
  const [editingId, setEditingId] = useState(null);
  const [editingData, setEditingData] = useState(null);
  const [tutorialOpen, setTutorialOpen] = useState(false);
  const [submitStatus, setSubmitStatus] = useState({});
  const [isSending, setIsSending] = useState({}); // New state for loading indicators
  const [emailPreview, setEmailPreview] = useState(null); // New state for email preview

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        console.log("üì° Iniciando fetch de CSVs...");

        const [usersText, incomingText, assignmentsText] = await Promise.all([
          fetch(USERS_CSV, { cache: 'no-store' }).then(r => r.text()),
          fetch(INCOMING_CSV, { cache: 'no-store' }).then(r => r.text()),
          fetch(ASSIGNMENTS_CSV, { cache: 'no-store' }).then(r => r.text()),
        ]);

        console.log("‚úÖ CSVs descargados");

        const parsedUsers = Papa.parse(usersText, { header: true, skipEmptyLines: true }).data.filter(u => u.Nombre && u.Nombre.trim());
        console.log("üë• Usuarios parseados:", parsedUsers);

        const filteredUsers = parsedUsers.filter(u => {
          const roles = (u['Rol en la Revista'] || '').split(';').map(r => r.trim()).filter(Boolean);
          return roles.some(r => r === 'Revisor' || r === 'Editor de Secci√≥n' || r === 'Editor en Jefe');
        });
        setUsers(filteredUsers);
        console.log("‚úÖ Usuarios filtrados (revisores + editores + editores en jefe):", filteredUsers);

        const revs = filteredUsers.filter(u => (u['Rol en la Revista'] || '').includes('Revisor'));
        const eds = filteredUsers.filter(u => (u['Rol en la Revista'] || '').includes('Editor de Secci√≥n'));
        const chiefs = filteredUsers.filter(u => (u['Rol en la Revista'] || '').includes('Editor en Jefe'));
        setReviewers(revs);
        setSectionEditors([...eds, ...chiefs]);
        console.log("üë§ Revisores:", revs);
        console.log("üìÇ Editores (incluyendo en jefe):", [...eds, ...chiefs]);

        const parsedIncoming = Papa.parse(incomingText, { header: true, skipEmptyLines: true }).data.filter(i => 
          i['Nombre (primer nombre y primer apellido)'] && 
          i['T√≠tulo de su art√≠culo'] && 
          i['Nombre (primer nombre y primer apellido)'].trim() && 
          i['T√≠tulo de su art√≠culo'].trim()
        );
        setIncoming(parsedIncoming);
        console.log("üìù Art√≠culos entrantes:", parsedIncoming);

        const parsedAssignments = Papa.parse(assignmentsText, { header: true, skipEmptyLines: true }).data.filter(a => 
          a['Nombre Art√≠culo'] && a['Nombre Art√≠culo'].trim() && a.Autor && a.Autor.trim()
        );
        const isCompleted = (assign) => {
          return !!(assign['Feedback 1'] && assign['Informe 1'] && assign['Feedback 2'] && assign['Informe 2'] && assign['Feedback 3'] && assign['Informe 3']);
        };
        const pendingAssignments = parsedAssignments.filter(a => !isCompleted(a));
        setAssignments(pendingAssignments);

        console.log("üìÇ Asignaciones pendientes:", pendingAssignments);
      } catch (err) {
        console.error('‚ùå Error fetching data:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const isCompleted = (assign) => {
    return !!(assign['Feedback 1'] && assign['Informe 1'] && assign['Feedback 2'] && assign['Informe 2'] && assign['Feedback 3'] && assign['Informe 3']);
  };

  const groupedIncoming = useMemo(() => {
    const groupMap = {};
    incoming.forEach(art => {
      const authorSanitized = sanitizeInput(art['Nombre (primer nombre y primer apellido)'] || '');
      const titleSanitized = sanitizeInput(art['T√≠tulo de su art√≠culo'] || '');
      if (!groupMap[authorSanitized]) {
        groupMap[authorSanitized] = [];
      }
      let matchingAssign = assignments.find(a => {
        const aTitleSanitized = sanitizeInput(a['Nombre Art√≠culo'] || '');
        const aAuthorSanitized = sanitizeInput(a.Autor || '');
        const exactMatch = aTitleSanitized === titleSanitized && aAuthorSanitized === authorSanitized;
        const fuzzyTitleMatch = !exactMatch && (
          aTitleSanitized.includes(titleSanitized) || 
          titleSanitized.includes(aTitleSanitized)
        );
        return exactMatch || (fuzzyTitleMatch && aAuthorSanitized === authorSanitized);
      });
      groupMap[authorSanitized].push({ ...art, assignment: matchingAssign });
    });
    return Object.entries(groupMap).map(([sanitizedAuthor, articles]) => ({
      authorName: articles[0]['Nombre (primer nombre y primer apellido)'],
      authorEmail: articles[0]['Correo electr√≥nico'],
      authorInstitution: articles[0]['Establecimiento educacional'],
      articles,
    }));
  }, [incoming, assignments]);

  const totalPending = groupedIncoming.reduce((sum, group) => {
    return sum + group.articles.filter(art => !(art.assignment && isCompleted(art.assignment))).length;
  }, 0);

  const handleAssignOrUpdate = async (data, isUpdate = false) => {
    const action = isUpdate ? 'update' : 'assign';
    const body = {
      action,
      title: data['Nombre Art√≠culo'],
      link: data['Link Art√≠culo'],
      rev1: data['Revisor 1'],
      rev2: data['Revisor 2'],
      editor: data.Editor,
      autor: data.Autor,
    };
    const articleKey = data['Nombre Art√≠culo'] || data.Autor;

    console.log("üì§ Enviando datos al script:", body);
    setIsSending({ ...isSending, [articleKey]: true });

    try {
      const response = await fetch(SCRIPT_URL, {
        method: 'POST',
        mode: 'no-cors',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      console.log("üì® Fetch enviado, response (no-cors, no se puede leer):", response);
      setSubmitStatus({ ...submitStatus, [articleKey]: 'Cambiado... espere unos momentos para ver el cambio, por favor reinicie la p√°gina.' });
      setEditingId(null);
      setEditingData(null);
    } catch (err) {
      setSubmitStatus({ ...submitStatus, [articleKey]: '‚ùå Error: ' + err.message });
      console.error('Error submitting:', err);
    } finally {
      setIsSending({ ...isSending, [articleKey]: false });
    }
  };

  const handleContact = async (email, name, title, role, articleKey) => {
    console.log("üìß Sending reminder request for:", { email, name, title, role, articleKey });

    if (!email || !name || !title || !role) {
      console.error("Missing email, name, title, or role:", { email, name, title, role });
      setSubmitStatus({ ...submitStatus, [articleKey]: `Error: Faltan datos para enviar el recordatorio.` });
      return;
    }

    setIsSending({ ...isSending, [articleKey]: true });

    const body = {
      action: 'sendReminder',
      email,
      name,
      title,
      role,
      senderName: user?.Nombre || 'Equipo Editorial',
    };

    console.log("üì§ Enviando datos al script:", body);

    try {
      const response = await fetch(SCRIPT_URL, {
        method: 'POST',
        mode: 'no-cors',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      console.log("üì® Fetch enviado (no-cors, no se puede leer la respuesta):", response);
      setSubmitStatus({ ...submitStatus, [articleKey]: 'Recordatorio enviado.' });

      // Generate email preview content (matching sendReminderEmail in Google Apps Script)
      const articleLink = assignments.find(a => sanitizeInput(a['Nombre Art√≠culo']) === sanitizeInput(title))?.['Link Art√≠culo'] || '';
      const htmlBody = `
        <div style="font-family: 'Georgia', serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8f1e9; border: 2px solid #8b5a2b; border-radius: 10px; color: #3c2f2f;">
          <div style="background-color: #8b5a2b; padding: 15px; border-radius: 8px 8px 0 0; text-align: center;">
            <h2 style="color: #f8f1e9; margin: 0;">Recordatorio de Revisi√≥n</h2>
          </div>
          <div style="padding: 20px;">
            <p>Estimado/a ${name},</p>
            <p>Le escribimos para recordarle amablemente que tiene pendiente la revisi√≥n del art√≠culo <strong>${title}</strong> como <strong>${role}</strong> en la <strong>Revista Nacional de las Ciencias para Estudiantes</strong>.</p>
            <p><strong>Enlace al art√≠culo:</strong> <a href="${articleLink}" style="color: #6b4e31; text-decoration: none; font-weight: bold;">Abrir en Google Drive</a></p>
            <p><strong>Instrucciones:</strong></p>
            <ul style="list-style-type: disc; margin-left: 20px; color: #3c2f2f;">
              <li>Accede al art√≠culo mediante el enlace proporcionado.</li>
              <li>Inicia sesi√≥n en <a href="https://www.revistacienciasestudiantes.com/" style="color: #6b4e31; text-decoration: none;">nuestro portal</a> para revisar las instrucciones detalladas y dejar tu informe, retroalimentaci√≥n y voto.</li>
              <li>Por favor, completa tu revisi√≥n lo antes posible, ya que el plazo est√° pr√≥ximo a vencer.</li>
            </ul>
            <p>Si necesita alguna extensi√≥n o apoyo, cont√°ctenos respondiendo a este correo.</p>
            <p>Gracias por su valiosa contribuci√≥n a nuestra revista.</p>
            <p>Atentamente,<br>${user?.Nombre || 'Equipo Editorial'}<br>Editor en Jefe<br>Revista Nacional de las Ciencias para Estudiantes</p>
          </div>
          <div style="background-color: #e6d8c6; padding: 10px; border-radius: 0 0 8px 8px; text-align: center;">
            <p style="font-size: 12px; color: #6b4e31; margin: 0;">Le pedimos amablemente que responda cuanto antes este correo si le es posible.</p>
          </div>
        </div>
      `;
      setEmailPreview({ to: email, subject: 'Recordatorio: Plazos de Revisi√≥n - Revista Nacional de las Ciencias para Estudiantes', htmlBody });
    } catch (err) {
      console.error("Error enviando recordatorio:", err);
      setSubmitStatus({ ...submitStatus, [articleKey]: `Error: ${err.message}` });
    } finally {
      setIsSending({ ...isSending, [articleKey]: false });
    }
  };

  const handleContactEditor = (art) => {
    console.log("Clicking Contactar Editor for:", art.assignment.Editor);
    const editor = sectionEditors.find(e => e.Nombre === art.assignment.Editor);
    if (!editor) {
      console.error("Editor not found:", art.assignment.Editor);
      setSubmitStatus({ ...submitStatus, [art['T√≠tulo de su art√≠culo']]: `Error: Editor (${art.assignment.Editor}) no encontrado.` });
      return;
    }
    handleContact(
      editor?.Correo || editor?.['Correo electr√≥nico'],
      art.assignment.Editor,
      art['T√≠tulo de su art√≠culo'],
      'Editor',
      art['T√≠tulo de su art√≠culo']
    );
  };

  const getUniqueId = (groupAuthor, artTitle) => {
    return `${sanitizeInput(groupAuthor)}-${sanitizeInput(artTitle || 'unnamed')}`;
  };

  const tutorialSteps = [
    '1. Explora la lista de colaboradores haciendo clic en sus perfiles para ver descripciones, intereses y contactarlos si no cumplen plazos (usa el bot√≥n "Contactar" para un email profesional).',
    '2. En "Art√≠culos por Autor", los art√≠culos se agrupan por autor usando el "T√≠tulo de su art√≠culo". Se muestran solo los pendientes (sin todas las retroalimentaciones/informes).',
    '3. Haz clic en "Asignar" para art√≠culos sin asignaci√≥n o "Editar" para actualizar. Completa los campos (t√≠tulo, link, revisores, editor) y confirma.',
    '4. Usa los botones de contacto para enviar recordatorios institucionales por correo desde el servidor.',
    '5. El panel es responsive. Los art√≠culos con todas las retroalimentaciones se ocultan autom√°ticamente, independientemente del "Estado".',
  ];

  if (loading) return <div className="text-center p-4 text-gray-600">Cargando gesti√≥n de asignaciones...</div>;

  return (
    <div className="bg-white rounded-lg shadow-md p-6 space-y-6 overflow-hidden">
      <div className="flex justify-between items-center">
        <h3 className="text-xl font-bold text-gray-800">Gesti√≥n de Asignaciones</h3>
        <div className="flex space-x-2">
          <button
            onClick={() => setTutorialOpen(true)}
            className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
          >
            Ayuda
          </button>
          {onClose && (
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">√ó</button>
          )}
        </div>
      </div>

      <section>
        <h4 className="text-lg font-semibold mb-4">Colaboradores (Revisores y Editores de Secci√≥n)</h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {users.map((u) => (
            <div
              key={u.Nombre}
              className="bg-gray-50 p-3 rounded-lg shadow-sm cursor-pointer hover:shadow-md transition-shadow border border-gray-200 flex flex-col items-center text-center h-full"
              onClick={() => setSelectedUser(u)}
            >
              <img
                src={u.Imagen || 'https://via.placeholder.com/64?text=?'} 
                alt={u.Nombre}
                className="w-16 h-16 rounded-full mb-2 object-cover"
              />
              <h5 className="font-medium text-sm">{u.Nombre}</h5>
              <p className="text-xs text-gray-600">{(u['Rol en la Revista'] || '').split(';')[0].trim()}</p>
            </div>
          ))}
        </div>
      </section>

      {selectedUser && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-start mb-4">
              <h5 className="font-bold text-lg">{selectedUser.Nombre}</h5>
              <button onClick={() => setSelectedUser(null)} className="text-gray-500 hover:text-gray-700">√ó</button>
            </div>
            <p className="text-gray-700 mb-4 leading-relaxed">{selectedUser.Descripci√≥n}</p>
            <p className="text-sm font-medium mb-4">
  <strong>Intereses:</strong> {selectedUser['√Åreas de inter√©s']?.split(';').map(i => i.trim()).join(', ') || 'N/A'}
</p>
<p className="text-sm text-gray-600 mb-4">
  <strong>Correo:</strong> {selectedUser.Correo || selectedUser['Correo electr√≥nico'] || 'N/A'}
</p>
            <button
              onClick={() => handleContact(
                selectedUser.Correo || selectedUser['Correo electr√≥nico'],
                selectedUser.Nombre,
                'General',
                (selectedUser['Rol en la Revista'] || '').includes('Revisor') ? 'Revisor' : 'Editor',
                selectedUser.Nombre
              )}
              className="w-full bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 text-sm"
              disabled={isSending[selectedUser.Nombre]}
            >
              {isSending[selectedUser.Nombre] ? 'Enviando correo...' : 'Contactar por Email (Recordatorio Sensible)'}
            </button>
            {submitStatus[selectedUser.Nombre] && (
              <span className={`text-sm mt-2 block ${submitStatus[selectedUser.Nombre].includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
                {submitStatus[selectedUser.Nombre]}
              </span>
            )}
          </div>
        </div>
      )}

      <section>
        <h4 className="text-lg font-semibold mb-4">Art√≠culos por Autor ({totalPending})</h4>
        <div className="space-y-6">
          {groupedIncoming.map((group) => (
            <div key={group.authorName} className="bg-gray-50 p-4 rounded-lg border">
              <div className="mb-4 p-3 bg-white rounded border">
                <h5 className="font-medium text-lg">{group.authorName}</h5>
                <p className="text-sm text-gray-600">Correo: {group.authorEmail}</p>
                <p className="text-sm text-gray-600">Instituci√≥n: {group.authorInstitution}</p>
              </div>
              <div className="space-y-4">
                {group.articles
                  .filter(art => !(art.assignment && isCompleted(art.assignment)))
                  .map((art) => {
                    const uniqueId = getUniqueId(group.authorName, art['T√≠tulo de su art√≠culo']);
                    const isAssigned = !!art.assignment;
                    const isEditingThis = editingId === uniqueId;
                    const currentR1 = isAssigned ? art.assignment['Revisor 1'] || 'No asignado' : 'No asignado';
                    const currentR2 = isAssigned ? art.assignment['Revisor 2'] || 'No asignado' : 'No asignado';
                    const currentEditor = isAssigned ? art.assignment.Editor || 'No asignado' : 'No asignado';
                    const statusBadge = isAssigned ? 'Asignado (en revisi√≥n)' : 'Pendiente de asignar';
                    const badgeClass = isAssigned ? 'bg-blue-100 text-blue-800' : 'bg-yellow-100 text-yellow-800';

                    const handleEditOrAssignClick = () => {
                      const defData = {
                        nombre: isAssigned ? art.assignment['Nombre Art√≠culo'] || art['T√≠tulo de su art√≠culo'] || '' : art['T√≠tulo de su art√≠culo'] || '',
                        link: isAssigned ? art.assignment['Link Art√≠culo'] || art['Inserta aqu√≠ tu art√≠culo en formato Word. Debe tener de 2.000 a 10.000 palabras.'] || '' : art['Inserta aqu√≠ tu art√≠culo en formato Word. Debe tener de 2.000 a 10.000 palabras.'] || '',
                        r1: isAssigned ? art.assignment['Revisor 1'] || '' : '',
                        r2: isAssigned ? art.assignment['Revisor 2'] || '' : '',
                        editor: isAssigned ? art.assignment.Editor || '' : '',
                      };
                      setEditingData({
                        id: uniqueId,
                        data: defData,
                        isUpdate: isAssigned,
                        author: group.authorName,
                        area: art['√Årea del art√≠culo (e.g.: econom√≠a)'],
                      });
                      setEditingId(uniqueId);
                    };

                    const handleCancel = () => {
                      setEditingId(null);
                      setEditingData(null);
                    };

                    const handleConfirm = () => {
                      const { data, isUpdate, author, area } = editingData;
                      handleAssignOrUpdate(
                        {
                          'Nombre Art√≠culo': data.nombre,
                          'Link Art√≠culo': data.link,
                          'Revisor 1': data.r1,
                          'Revisor 2': data.r2,
                          Editor: data.editor,
                          Autor: author,
                          '√Årea del art√≠culo': area,
                        },
                        isUpdate
                      );
                    };

                    const updateField = (field, value) => {
                      setEditingData(prev => ({
                        ...prev,
                        data: { ...prev.data, [field]: value }
                      }));
                    };

                    const articleKey = art['T√≠tulo de su art√≠culo'] || uniqueId;

                    return (
                      <div key={uniqueId} className="bg-white p-4 rounded-lg border mb-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                          <div>
                            <h6 className="font-medium">{art['T√≠tulo de su art√≠culo'] || 'Sin t√≠tulo'}</h6>
                            <p className="text-sm text-gray-600"><strong>√Årea:</strong> {art['√Årea del art√≠culo (e.g.: econom√≠a)']}</p>
                          </div>
                          <div>
                            <p className="text-sm"><strong>Resumen:</strong> {sanitizeInput(art['Abstract o resumen (150-300 palabras)']).substring(0, 150)}...</p>
                          </div>
                        </div>
                        <div className="mb-4 space-y-1 text-sm">
                          <p><strong>Revisor 1:</strong> {currentR1}</p>
                          <p><strong>Revisor 2:</strong> {currentR2}</p>
                          <p><strong>Editor:</strong> {currentEditor}</p>
                          <span className={`inline-block px-2 py-1 text-xs rounded-full ${badgeClass}`}>
                            {statusBadge}
                          </span>
                        </div>
                        <div className="flex flex-wrap gap-2 mb-4">
                          <button
                            onClick={handleEditOrAssignClick}
                            className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                            disabled={isSending[articleKey]}
                          >
                            {isSending[articleKey] ? 'Cambiando...' : (isAssigned ? 'Editar' : 'Asignar')}
                          </button>
                          {isAssigned && art.assignment['Revisor 1'] && (
                            <button
                              onClick={() => {
                                console.log("Clicking Contactar R1 for:", art.assignment['Revisor 1']);
                                const reviewer = reviewers.find(r => r.Nombre === art.assignment['Revisor 1']);
                                if (!reviewer) {
                                  console.error("Reviewer not found:", art.assignment['Revisor 1']);
                                  setSubmitStatus({ ...submitStatus, [articleKey]: `Error: Revisor 1 (${art.assignment['Revisor 1']}) no encontrado.` });
                                  return;
                                }
                                handleContact(
                                  reviewer?.Correo || reviewer?.['Correo electr√≥nico'],
                                  art.assignment['Revisor 1'],
                                  art['T√≠tulo de su art√≠culo'],
                                  'Revisor 1',
                                  articleKey
                                );
                              }}
                              className="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700"
                              disabled={isSending[articleKey]}
                            >
                              {isSending[articleKey] ? 'Enviando correo...' : 'Contactar R1'}
                            </button>
                          )}
                          {isAssigned && art.assignment['Revisor 2'] && (
                            <button
                              onClick={() => {
                                console.log("Clicking Contactar R2 for:", art.assignment['Revisor 2']);
                                const reviewer = reviewers.find(r => r.Nombre === art.assignment['Revisor 2']);
                                if (!reviewer) {
                                  console.error("Reviewer not found:", art.assignment['Revisor 2']);
                                  setSubmitStatus({ ...submitStatus, [articleKey]: `Error: Revisor 2 (${art.assignment['Revisor 2']}) no encontrado.` });
                                  return;
                                }
                                handleContact(
                                  reviewer?.Correo || reviewer?.['Correo electr√≥nico'],
                                  art.assignment['Revisor 2'],
                                  art['T√≠tulo de su art√≠culo'],
                                  'Revisor 2',
                                  articleKey
                                );
                              }}
                              className="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700"
                              disabled={isSending[articleKey]}
                            >
                              {isSending[articleKey] ? 'Enviando correo...' : 'Contactar R2'}
                            </button>
                          )}
                          {isAssigned && art.assignment.Editor && (
                            <button
                              onClick={() => {
                                console.log("Clicking Contactar Editor for:", art.assignment.Editor);
                                const editor = sectionEditors.find(e => e.Nombre === art.assignment.Editor);
                                if (!editor) {
                                  console.error("Editor not found:", art.assignment.Editor);
                                  setSubmitStatus({ ...submitStatus, [articleKey]: `Error: Editor (${art.assignment.Editor}) no encontrado.` });
                                  return;
                                }
                                handleContact(
                                  editor?.Correo || editor?.['Correo electr√≥nico'],
                                  art.assignment.Editor,
                                  art['T√≠tulo de su art√≠culo'],
                                  'Editor',
                                  articleKey
                                );
                              }}
                              className="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700"
                              disabled={isSending[articleKey]}
                            >
                              {isSending[articleKey] ? 'Enviando correo...' : 'Contactar Editor'}
                            </button>
                          )}
                          {submitStatus[articleKey] && (
                            <span className={`text-sm mt-2 block ${submitStatus[articleKey].includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
                              {submitStatus[articleKey]}
                            </span>
                          )}
                        </div>
                        {isEditingThis && (
                          <div className="p-4 bg-gray-100 rounded border">
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-4">
                              <input
                                placeholder="Nombre del Art√≠culo"
                                value={editingData.data.nombre}
                                onChange={(e) => updateField('nombre', e.target.value)}
                                className="border p-2 rounded-md text-sm"
                              />
                              <input
                                placeholder="Link de Google Drive"
                                value={editingData.data.link}
                                onChange={(e) => updateField('link', e.target.value)}
                                className="border p-2 rounded-md text-sm"
                              />
                              <select
                                value={editingData.data.r1}
                                onChange={(e) => updateField('r1', e.target.value)}
                                className="border p-2 rounded-md text-sm"
                              >
                                <option value="">Seleccionar Revisor 1</option>
                                {reviewers.map((r) => <option key={r.Nombre} value={r.Nombre}>{r.Nombre}</option>)}
                              </select>
                              <select
                                value={editingData.data.r2}
                                onChange={(e) => updateField('r2', e.target.value)}
                                className="border p-2 rounded-md text-sm"
                              >
                                <option value="">Seleccionar Revisor 2</option>
                                {reviewers.map((r) => <option key={r.Nombre} value={r.Nombre}>{r.Nombre}</option>)}
                              </select>
                              <select
                                value={editingData.data.editor}
                                onChange={(e) => updateField('editor', e.target.value)}
                                className="border p-2 rounded-md text-sm"
                              >
                                <option value="">Seleccionar Editor</option>
                                {sectionEditors.map((e) => <option key={e.Nombre} value={e.Nombre}>{e.Nombre}</option>)}
                              </select>
                            </div>
                            <div className="flex space-x-2">
                              <button
                                onClick={handleConfirm}
                                disabled={!editingData.data.nombre || !editingData.data.link || !editingData.data.r1 || !editingData.data.r2 || !editingData.data.editor || isSending[articleKey]}
                                className="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:bg-gray-400 text-sm"
                              >
                                {isSending[articleKey] ? 'Cambiando...' : (editingData.isUpdate ? 'Actualizar' : 'Asignar')}
                              </button>
                              <button
                                onClick={handleCancel}
                                className="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600 text-sm"
                              >
                                Cancelar
                              </button>
                            </div>
                            {submitStatus[articleKey] && (
                              <span className={`text-sm mt-2 block ${submitStatus[articleKey].includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
                                {submitStatus[articleKey]}
                              </span>
                            )}
                          </div>
                        )}
                      </div>
                    );
                  })}
              </div>
            </div>
          ))}
        </div>
      </section>

      {tutorialOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-start mb-4">
              <h5 className="font-bold text-lg">Tutorial de Gesti√≥n</h5>
              <button onClick={() => setTutorialOpen(false)} className="text-gray-500 hover:text-gray-700">√ó</button>
            </div>
            <div className="space-y-3 text-sm leading-relaxed">
              {tutorialSteps.map((step, i) => <p key={i}>{step}</p>)}
            </div>
            <button
              onClick={() => setTutorialOpen(false)}
              className="mt-4 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
            >
              Entendido
            </button>
          </div>
        </div>
      )}

      {emailPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-lg w-full max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-start mb-4">
              <h5 className="font-bold text-lg">Previsualizaci√≥n del Correo Enviado</h5>
              <button onClick={() => setEmailPreview(null)} className="text-gray-500 hover:text-gray-700">√ó</button>
            </div>
            <div className="mb-4">
              <p className="text-sm"><strong>Para:</strong> {emailPreview.to}</p>
              <p className="text-sm"><strong>Asunto:</strong> {emailPreview.subject}</p>
            </div>
            <div
              className="border p-4 rounded bg-gray-50"
              dangerouslySetInnerHTML={{ __html: emailPreview.htmlBody }}
            />
            <button
              onClick={() => setEmailPreview(null)}
              className="mt-4 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
            >
              Cerrar
            </button>
          </div>
        </div>
      )}
    </div>
  );
}